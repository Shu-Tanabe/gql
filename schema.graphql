type Restaurant {
  restaurantId: ID!
  restaurantName: String!
  score: Float
  introducer: String
  description: String
  updatedDate: Date
}

type Query {
  getRestaurants: [Restaurant]
  getRestaurantById(restaurantId: String!): Restaurant
}

type Mutation {
  addRestaurant(restaurantInput: AddRestaurantInput): Restaurant
  updateRestaurant(
    restaurantId: String!
    restaurantUpdate: UpdateRestaurantInput
  ): Restaurant
  deleteRestaurant(restaurantId: String!): Status!
}

enum Status {
  OK
  CREATED
  NO_CONTENT
  BAD_REQUEST
  UNAUTHORIZED
  FORBIDDEN
  NOT_FOUND
  INTERNAL_SERVER_ERROR
  BAD_GATEWAY
  SURVICE_UNAVAILABLE
  GATEWAY_TIMEOUT
}

input AddRestaurantInput {
  restaurantName: String!
  score: Float
  introducer: String
  description: String
}

input UpdateRestaurantInput {
  restaurantName: String!
  score: Float
  description: String
}

scalar Date
